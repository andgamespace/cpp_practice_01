cmake_minimum_required(VERSION 3.20)
project(trading_env VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable vcpkg manifest mode
set(VCPKG_MANIFEST_MODE ON)
set(VCPKG_MANIFEST_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Build options
option(WITH_CUDA "Build with CUDA support" OFF)
option(WITH_PYTORCH "Build with PyTorch support" OFF)
option(BUILD_TESTS "Build tests" ON)
option(BUILD_FRONTEND_SERVER "Build frontend server" ON)

# Set output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Add include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Find required packages
find_package(Arrow CONFIG REQUIRED)
find_package(unofficial-vincentlaucsb-csv-parser CONFIG REQUIRED)
find_package(Drogon CONFIG REQUIRED)
find_package(pybind11 CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)
find_package(Taskflow CONFIG REQUIRED)

# Try to find nlohmann_json, but don't require it
find_package(nlohmann_json CONFIG QUIET)
if(NOT nlohmann_json_FOUND)
    message(STATUS "nlohmann_json not found, using bundled version")
    # Define a header-only library target for the bundled version
    add_library(nlohmann_json INTERFACE)
    target_include_directories(nlohmann_json INTERFACE ${CMAKE_SOURCE_DIR}/include)
    # Download the single header file if it doesn't exist
    if(NOT EXISTS "${CMAKE_SOURCE_DIR}/include/nlohmann/json.hpp")
        file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/nlohmann")
        file(DOWNLOAD
            "https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp"
            "${CMAKE_SOURCE_DIR}/include/nlohmann/json.hpp"
            SHOW_PROGRESS
        )
    endif()
else()
    message(STATUS "Found nlohmann_json: ${nlohmann_json_DIR}")
endif()

# Optional PyTorch support
if(WITH_PYTORCH)
    find_package(Torch)
    if(Torch_FOUND)
        message(STATUS "PyTorch found, enabling PyTorch support")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")
        include_directories(${TORCH_INCLUDE_DIRS})
        add_definitions(-DPYTORCH_AVAILABLE=1)
    else()
        message(STATUS "PyTorch not found, disabling PyTorch support")
        add_definitions(-DPYTORCH_AVAILABLE=0)
    endif()
else()
    message(STATUS "PyTorch support disabled")
    add_definitions(-DPYTORCH_AVAILABLE=0)
endif()

# Optional CUDA support
if(WITH_CUDA)
    find_package(CUDA REQUIRED)
    enable_language(CUDA)
    add_definitions(-DCUDA_AVAILABLE=1)
    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -std=c++17")
    include_directories(${CUDA_INCLUDE_DIRS})
else()
    add_definitions(-DCUDA_AVAILABLE=0)
endif()

# Source files
set(CORE_SOURCES
    src/DataLoader.cpp
    src/BacktestEngine.cpp
    src/FrontendController.cpp
    src/MyWebSocketController.cpp
    src/TechnicalIndicators.cpp
)

# Build the executable (server/backtest app)
add_executable(trading_env
    src/main.cpp
    ${CORE_SOURCES}
)

# Link libraries for the executable
if (DEFINED ARROW_BUILD_STATIC AND ARROW_BUILD_STATIC)
    target_link_libraries(trading_env PRIVATE Arrow::arrow_static)
else()
    target_link_libraries(trading_env PRIVATE Arrow::arrow_shared)
endif()

target_link_libraries(trading_env PRIVATE
    unofficial::vincentlaucsb-csv-parser::csv
    Drogon::Drogon
    pybind11::module
    spdlog::spdlog
    Taskflow::Taskflow
)

# Link nlohmann_json based on how it was found
if(nlohmann_json_FOUND)
    target_link_libraries(trading_env PRIVATE nlohmann_json::nlohmann_json)
else()
    target_link_libraries(trading_env PRIVATE nlohmann_json)
endif()

if(Torch_FOUND)
    target_link_libraries(trading_env PRIVATE ${TORCH_LIBRARIES})
endif()

if(WITH_CUDA)
    target_link_libraries(trading_env PRIVATE ${CUDA_LIBRARIES})
endif()

# Build the Python module (shared library)
add_library(trading_env_module SHARED
    src/PyBindings.cpp
    ${CORE_SOURCES}
)

# Link libraries for the Python module
if (DEFINED ARROW_BUILD_STATIC AND ARROW_BUILD_STATIC)
    target_link_libraries(trading_env_module PRIVATE Arrow::arrow_static)
else()
    target_link_libraries(trading_env_module PRIVATE Arrow::arrow_shared)
endif()

target_link_libraries(trading_env_module PRIVATE
    unofficial::vincentlaucsb-csv-parser::csv
    spdlog::spdlog
    Taskflow::Taskflow
    Drogon::Drogon
    pybind11::module
)

# Link nlohmann_json based on how it was found
if(nlohmann_json_FOUND)
    target_link_libraries(trading_env_module PRIVATE nlohmann_json::nlohmann_json)
else()
    target_link_libraries(trading_env_module PRIVATE nlohmann_json)
endif()

if(Torch_FOUND)
    target_link_libraries(trading_env_module PRIVATE ${TORCH_LIBRARIES})
endif()

if(WITH_CUDA)
    target_link_libraries(trading_env_module PRIVATE ${CUDA_LIBRARIES})
endif()

# Set properties for the Python module
set_target_properties(trading_env_module PROPERTIES
    PREFIX ""
    OUTPUT_NAME "my_module"  # Keep the same name for compatibility
    SUFFIX ".so"
    POSITION_INDEPENDENT_CODE ON
)

# Add install targets
install(TARGETS trading_env DESTINATION bin)
install(TARGETS trading_env_module DESTINATION lib)

# Install Python module
install(FILES trading_env.py DESTINATION lib)

# Install configuration files
install(DIRECTORY configs/ DESTINATION etc/trading_env)

# Build tests if enabled
if(BUILD_TESTS)
    add_executable(trading_env_test
        src/test/test_main.cpp
        src/test/test_dataloader.cpp
        src/test/test_backtest.cpp
        src/test/test_indicators.cpp
        ${CORE_SOURCES}
    )
    
    target_link_libraries(trading_env_test PRIVATE
        unofficial::vincentlaucsb-csv-parser::csv
        Drogon::Drogon
        spdlog::spdlog
        Taskflow::Taskflow
    )
    
    # Link Arrow
    if (DEFINED ARROW_BUILD_STATIC AND ARROW_BUILD_STATIC)
        target_link_libraries(trading_env_test PRIVATE Arrow::arrow_static)
    else()
        target_link_libraries(trading_env_test PRIVATE Arrow::arrow_shared)
    endif()
    
    # Link nlohmann_json based on how it was found
    if(nlohmann_json_FOUND)
        target_link_libraries(trading_env_test PRIVATE nlohmann_json::nlohmann_json)
    else()
        target_link_libraries(trading_env_test PRIVATE nlohmann_json)
    endif()
    
    if(Torch_FOUND)
        target_link_libraries(trading_env_test PRIVATE ${TORCH_LIBRARIES})
    endif()
    
    if(WITH_CUDA)
        target_link_libraries(trading_env_test PRIVATE ${CUDA_LIBRARIES})
    endif()
    
    install(TARGETS trading_env_test DESTINATION bin)
endif()

# Build frontend server if enabled
if(BUILD_FRONTEND_SERVER)
    # Add custom target to build the frontend
    add_custom_target(frontend_build
        COMMAND npm install
        COMMAND npm run build
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/frontend
    )
    
    # Make the main executable depend on the frontend build
    add_dependencies(trading_env frontend_build)
    
    # Install frontend files
    install(DIRECTORY ${CMAKE_SOURCE_DIR}/frontend/dist/ DESTINATION share/trading_env/frontend)
endif()